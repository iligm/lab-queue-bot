import { swapUserFromQueue, clearQueue, getQueueList, isUserInQueue, setQueueName, getQueueName, getUserIdByUsername } from './queue.mjs';
import { config } from './config.mjs';
import { sendQueueMessage, updateQueueMessage } from './actions.mjs';

export const setupCommands = (bot) => {
  bot.telegram.setMyCommands([
    { command: 'help', description: '–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö' },
    { command: 'queue', description: '–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞ —Ä–∞–∑)' },
    { command: 'view', description: '–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏' },
    { command: 'stop', description: '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –æ—á–µ—Ä–µ–¥–∏' },
    { command: 'swap', description: '–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏' },
  ]);

  bot.command('help', async (ctx) => {
    const githubLink = 'https://github.com/iligm/lab-queue-bot';
    const message = await ctx.replyWithMarkdown(`**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
- \`/help\` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
- \`/queue\` \`[name]\` ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å.
- \`/view\` ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å.
- \`/stop\` ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å.
- \`/swap @username\` ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏.

üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ GitHub:  
${githubLink}`);

    if (config.settings.deleteOldMessages) {
      setTimeout(() => deleteMessage(ctx, ctx.message.message_id), 5000);
    }
  });

  bot.command('queue', async (ctx) => {
    const queueName = ctx.message.text.split(' ').slice(1).join(' ') || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

    if (!config.queueActive) {
      config.queueActive = true;
      clearQueue();
      setQueueName(queueName);

      const chatId = ctx.message.chat.id;
      try {
        await sendQueueMessage(bot, chatId, `–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å "${queueName}"`, {
          inline_keyboard: [
            [{ text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å', callback_data: 'join_queue' }],
            [{ text: '–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å', callback_data: 'leave_queue' }],
          ],
        });

        if (config.settings.pinMessage && config.activeMessageId) {
          await bot.telegram.pinChatMessage(chatId, config.activeMessageId, true);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
      }
    } else {
      const message = await ctx.reply('–û—á–µ—Ä–µ–¥—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.');
      if (config.settings.deleteOldMessages) {
        setTimeout(() => deleteMessage(ctx, ctx.message.message_id), 5000);
        setTimeout(() => deleteMessage(ctx, message.message_id), 5000);
      }
    }
  });

  bot.command('view', async (ctx) => {
    const queueList = getQueueList();
    const message = await ctx.reply(queueList);
    if (config.settings.deleteOldMessages) {
      setTimeout(() => deleteMessage(ctx, ctx.message.message_id), 5000);
    }
  });

  bot.command('stop', async (ctx) => {
    if (config.queueActive) {
      config.queueActive = false;

      if (config.activeChatId && config.activeMessageId) {
        try {
          await bot.telegram.editMessageReplyMarkup(config.activeChatId, config.activeMessageId, null, { inline_keyboard: [] });
          if (config.settings.pinMessage) {
            await ctx.unpinChatMessage(config.activeChatId, config.activeMessageId);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—á–µ—Ä–µ–¥–∏:', error);
        }
      }

      config.activeMessageId = null;
      config.activeChatId = null;
      const message = await ctx.reply('–ó–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
      if (config.settings.deleteOldMessages) {
        setTimeout(() => deleteMessage(ctx, ctx.message.message_id), 5000);
      }
    } else {
      const message = await ctx.reply('–û—á–µ—Ä–µ–¥—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.');
      if (config.settings.deleteOldMessages) {
        setTimeout(() => deleteMessage(ctx, ctx.message.message_id), 5000);
      }
    }
  });

  bot.command('swap', async (ctx) => {
    const messageText = ctx.message.text.trim();
    const mentionedUser = messageText.split(' ')[1];

    if (config.settings.deleteOldMessages) {
      setTimeout(() => deleteMessage(ctx, ctx.message.message_id), 5000);
    }

    if (!mentionedUser || !mentionedUser.startsWith('@')) {
      const message = await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /swap @username');
      if (config.settings.deleteOldMessages) {
        setTimeout(() => deleteMessage(ctx, message.message_id), 5000);
      }
      return;
    }

    const sender = ctx.message.from;
    const mentionedUserId = getUserIdByUsername(mentionedUser.slice(1));

    if (!isUserInQueue(sender.id)) {
      const message = await ctx.reply('–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.');
      if (config.settings.deleteOldMessages) {
        setTimeout(() => deleteMessage(ctx, message.message_id), 5000);
      }
      return;
    }

    if (!mentionedUserId || !isUserInQueue(mentionedUserId)) {
      const message = await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏.');
      if (config.settings.deleteOldMessages) {
        setTimeout(() => deleteMessage(ctx, message.message_id), 5000);
      }
      return;
    }

    const chatId = ctx.chat.id;
    const swapMessage = await ctx.reply(
      `${mentionedUser}, ${sender.first_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏. –ü—Ä–∏–Ω—è—Ç—å –æ–±–º–µ–Ω?`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–î–∞', callback_data: `accept_swap_${sender.id}_${mentionedUserId}` }],
            [{ text: '–ù–µ—Ç', callback_data: `reject_swap_${sender.id}_${mentionedUserId}` }],
          ],
        },
      }
    );

    bot.action(/^accept_swap_(\d+)_(\d+)$/, async (ctx) => {
      const [, userId1, userId2] = ctx.match.map(Number);
      const clickerId = Number(ctx.from.id);

      if (clickerId !== userId2) {
        await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫—É, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç—è—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è', { show_alert: true });
        return;
      }

      swapUserFromQueue(userId1, userId2);

      const updatedQueue = getQueueList();
      await ctx.editMessageText(`–û–±–º–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n${updatedQueue}`);
      await updateQueueMessage(bot, `–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å "${getQueueName()}"`, {
        inline_keyboard: [
          [{ text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å', callback_data: 'join_queue' }],
          [{ text: '–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å', callback_data: 'leave_queue' }],
        ],
      });

      if (config.settings.deleteOldMessages) {
        setTimeout(() => deleteMessage(ctx, ctx.callbackQuery.message.message_id), 5000);
      }
    });

    bot.action(/^reject_swap_(\d+)_(\d+)$/, async (ctx) => {
      const [, userId1, userId2] = ctx.match.map(Number);
      const clickerId = Number(ctx.from.id);

      if (clickerId !== userId1 && clickerId !== userId2) {
        await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ–±–º–µ–Ω–∞', { show_alert: true });
        return;
      }

      await ctx.editMessageText('–û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.');
      if (config.settings.deleteOldMessages) {
        setTimeout(() => deleteMessage(ctx, ctx.callbackQuery.message.message_id), 5000);
      }
    });

    if (config.settings.deleteOldMessages) {
      setTimeout(() => deleteMessage(ctx, swapMessage.message_id), 5000);
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const deleteMessage = async (ctx, messageId) => {
  try {
    await ctx.deleteMessage(messageId);
  } catch (error) {
    console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (ID: ${messageId}):`, error);
  }
};
